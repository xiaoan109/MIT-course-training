//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
// On Wed Sep 25 05:56:26 UTC 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_putSampleInput             O     1 reg
// getSampleOutput                O    16 reg
// RDY_getSampleOutput            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putSampleInput_in              I    16 reg
// EN_putSampleInput              I     1
// EN_getSampleOutput             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFIRFilter(CLK,
		   RST_N,

		   putSampleInput_in,
		   EN_putSampleInput,
		   RDY_putSampleInput,

		   EN_getSampleOutput,
		   getSampleOutput,
		   RDY_getSampleOutput);
  input  CLK;
  input  RST_N;

  // action method putSampleInput
  input  [15 : 0] putSampleInput_in;
  input  EN_putSampleInput;
  output RDY_putSampleInput;

  // actionvalue method getSampleOutput
  input  EN_getSampleOutput;
  output [15 : 0] getSampleOutput;
  output RDY_getSampleOutput;

  // signals for module outputs
  wire [15 : 0] getSampleOutput;
  wire RDY_getSampleOutput, RDY_putSampleInput;

  // register r_0
  reg [15 : 0] r_0;
  wire [15 : 0] r_0$D_IN;
  wire r_0$EN;

  // register r_1
  reg [15 : 0] r_1;
  wire [15 : 0] r_1$D_IN;
  wire r_1$EN;

  // register r_2
  reg [15 : 0] r_2;
  wire [15 : 0] r_2$D_IN;
  wire r_2$EN;

  // register r_3
  reg [15 : 0] r_3;
  wire [15 : 0] r_3$D_IN;
  wire r_3$EN;

  // register r_4
  reg [15 : 0] r_4;
  wire [15 : 0] r_4$D_IN;
  wire r_4$EN;

  // register r_5
  reg [15 : 0] r_5;
  wire [15 : 0] r_5$D_IN;
  wire r_5$EN;

  // register r_6
  reg [15 : 0] r_6;
  wire [15 : 0] r_6$D_IN;
  wire r_6$EN;

  // register r_7
  reg [15 : 0] r_7;
  wire [15 : 0] r_7$D_IN;
  wire r_7$EN;

  // ports of submodule infifo
  wire [15 : 0] infifo$D_IN, infifo$D_OUT;
  wire infifo$CLR, infifo$DEQ, infifo$EMPTY_N, infifo$ENQ, infifo$FULL_N;

  // ports of submodule outfifo
  wire [15 : 0] outfifo$D_IN, outfifo$D_OUT;
  wire outfifo$CLR, outfifo$DEQ, outfifo$EMPTY_N, outfifo$ENQ, outfifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_process,
       CAN_FIRE_getSampleOutput,
       CAN_FIRE_putSampleInput,
       WILL_FIRE_RL_process,
       WILL_FIRE_getSampleOutput,
       WILL_FIRE_putSampleInput;

  // remaining internal signals
  wire [63 : 0] IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18,
		IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57,
		IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96,
		IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136,
		IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177,
		_53615_MUL_IF_r_3_BIT_15_0_THEN_NEG_r_3_CONCAT__ETC___d94,
		_813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16,
		_813_MUL_IF_r_7_70_BIT_15_71_THEN_NEG_r_7_70_CO_ETC___d175,
		_872_MUL_IF_r_1_BIT_15_1_THEN_NEG_r_1_CONCAT_0__ETC___d55,
		_872_MUL_IF_r_5_0_BIT_15_30_THEN_NEG_r_5_0_CONC_ETC___d134;
  wire [47 : 0] IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33,
		IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72,
		IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111,
		IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151,
		IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192,
		IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30,
		IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d69,
		IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d108,
		IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d148,
		IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d189;
  wire [31 : 0] x__h10211,
		x__h10227,
		x__h1623,
		x__h16259,
		x__h16275,
		x__h22346,
		x__h22362,
		x__h28466,
		x__h28482,
		x__h3868,
		x__h3884,
		x__h6477,
		x__h6509,
		x__h6573,
		x__h6637;
  wire [15 : 0] y_f__h11263,
		y_f__h17311,
		y_f__h23398,
		y_f__h29518,
		y_f__h4923;

  // action method putSampleInput
  assign RDY_putSampleInput = infifo$FULL_N ;
  assign CAN_FIRE_putSampleInput = infifo$FULL_N ;
  assign WILL_FIRE_putSampleInput = EN_putSampleInput ;

  // actionvalue method getSampleOutput
  assign getSampleOutput = outfifo$D_OUT ;
  assign RDY_getSampleOutput = outfifo$EMPTY_N ;
  assign CAN_FIRE_getSampleOutput = outfifo$EMPTY_N ;
  assign WILL_FIRE_getSampleOutput = EN_getSampleOutput ;

  // submodule infifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) infifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(infifo$D_IN),
						 .ENQ(infifo$ENQ),
						 .DEQ(infifo$DEQ),
						 .CLR(infifo$CLR),
						 .D_OUT(infifo$D_OUT),
						 .FULL_N(infifo$FULL_N),
						 .EMPTY_N(infifo$EMPTY_N));

  // submodule outfifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) outfifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(outfifo$D_IN),
						  .ENQ(outfifo$ENQ),
						  .DEQ(outfifo$DEQ),
						  .CLR(outfifo$CLR),
						  .D_OUT(outfifo$D_OUT),
						  .FULL_N(outfifo$FULL_N),
						  .EMPTY_N(outfifo$EMPTY_N));

  // rule RL_process
  assign CAN_FIRE_RL_process = infifo$EMPTY_N && outfifo$FULL_N ;
  assign WILL_FIRE_RL_process = CAN_FIRE_RL_process ;

  // register r_0
  assign r_0$D_IN = infifo$D_OUT ;
  assign r_0$EN = CAN_FIRE_RL_process ;

  // register r_1
  assign r_1$D_IN = r_0 ;
  assign r_1$EN = CAN_FIRE_RL_process ;

  // register r_2
  assign r_2$D_IN = r_1 ;
  assign r_2$EN = CAN_FIRE_RL_process ;

  // register r_3
  assign r_3$D_IN = r_2 ;
  assign r_3$EN = CAN_FIRE_RL_process ;

  // register r_4
  assign r_4$D_IN = r_3 ;
  assign r_4$EN = CAN_FIRE_RL_process ;

  // register r_5
  assign r_5$D_IN = r_4 ;
  assign r_5$EN = CAN_FIRE_RL_process ;

  // register r_6
  assign r_6$D_IN = r_5 ;
  assign r_6$EN = CAN_FIRE_RL_process ;

  // register r_7
  assign r_7$D_IN = r_6 ;
  assign r_7$EN = CAN_FIRE_RL_process ;

  // submodule infifo
  assign infifo$D_IN = putSampleInput_in ;
  assign infifo$ENQ = EN_putSampleInput ;
  assign infifo$DEQ = CAN_FIRE_RL_process ;
  assign infifo$CLR = 1'b0 ;

  // submodule outfifo
  assign outfifo$D_IN = x__h1623[31:16] ;
  assign outfifo$ENQ = CAN_FIRE_RL_process ;
  assign outfifo$DEQ = EN_getSampleOutput ;
  assign outfifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33 =
	     (!IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63] &&
	      IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30 ;
  assign IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72 =
	     (!IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57[63] &&
	      IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d69[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d69 ;
  assign IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111 =
	     (!IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96[63] &&
	      IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d108[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d108 ;
  assign IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151 =
	     (!IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136[63] &&
	      IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d148[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d148 ;
  assign IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192 =
	     (!IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177[63] &&
	      IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d189[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d189 ;
  assign IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18 =
	     infifo$D_OUT[15] ?
	       _813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 :
	       -_813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 ;
  assign IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30 =
	     IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63:16] +
	     { 32'd0, y_f__h4923 } ;
  assign IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57 =
	     r_1[15] ?
	       _872_MUL_IF_r_1_BIT_15_1_THEN_NEG_r_1_CONCAT_0__ETC___d55 :
	       -_872_MUL_IF_r_1_BIT_15_1_THEN_NEG_r_1_CONCAT_0__ETC___d55 ;
  assign IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d69 =
	     IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57[63:16] +
	     { 32'd0, y_f__h11263 } ;
  assign IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d108 =
	     IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96[63:16] +
	     { 32'd0, y_f__h17311 } ;
  assign IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96 =
	     r_3[15] ?
	       -_53615_MUL_IF_r_3_BIT_15_0_THEN_NEG_r_3_CONCAT__ETC___d94 :
	       _53615_MUL_IF_r_3_BIT_15_0_THEN_NEG_r_3_CONCAT__ETC___d94 ;
  assign IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136 =
	     r_5[15] ?
	       _872_MUL_IF_r_5_0_BIT_15_30_THEN_NEG_r_5_0_CONC_ETC___d134 :
	       -_872_MUL_IF_r_5_0_BIT_15_30_THEN_NEG_r_5_0_CONC_ETC___d134 ;
  assign IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d148 =
	     IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136[63:16] +
	     { 32'd0, y_f__h23398 } ;
  assign IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177 =
	     r_7[15] ?
	       _813_MUL_IF_r_7_70_BIT_15_71_THEN_NEG_r_7_70_CO_ETC___d175 :
	       -_813_MUL_IF_r_7_70_BIT_15_71_THEN_NEG_r_7_70_CO_ETC___d175 ;
  assign IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d189 =
	     IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177[63:16] +
	     { 32'd0, y_f__h29518 } ;
  assign _53615_MUL_IF_r_3_BIT_15_0_THEN_NEG_r_3_CONCAT__ETC___d94 =
	     32'd53615 * x__h16259 ;
  assign _813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 =
	     32'd813 * x__h3868 ;
  assign _813_MUL_IF_r_7_70_BIT_15_71_THEN_NEG_r_7_70_CO_ETC___d175 =
	     32'd813 * x__h28466 ;
  assign _872_MUL_IF_r_1_BIT_15_1_THEN_NEG_r_1_CONCAT_0__ETC___d55 =
	     32'd872 * x__h10211 ;
  assign _872_MUL_IF_r_5_0_BIT_15_30_THEN_NEG_r_5_0_CONC_ETC___d134 =
	     32'd872 * x__h22346 ;
  assign x__h10211 = r_1[15] ? -x__h10227 : x__h10227 ;
  assign x__h10227 = { r_1, 16'd0 } ;
  assign x__h1623 =
	     ((!IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47] &&
	       (IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31] ||
		IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47] &&
		  (!IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31] ||
		   ~IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31:0])) +
	     x__h6477 ;
  assign x__h16259 = r_3[15] ? -x__h16275 : x__h16275 ;
  assign x__h16275 = { r_3, 16'd0 } ;
  assign x__h22346 = r_5[15] ? -x__h22362 : x__h22362 ;
  assign x__h22362 = { r_5, 16'd0 } ;
  assign x__h28466 = r_7[15] ? -x__h28482 : x__h28482 ;
  assign x__h28482 = { r_7, 16'd0 } ;
  assign x__h3868 = infifo$D_OUT[15] ? -x__h3884 : x__h3884 ;
  assign x__h3884 = { infifo$D_OUT, 16'd0 } ;
  assign x__h6477 =
	     x__h6509 +
	     ((!IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[47] &&
	       (IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[31] ||
		IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[47] &&
		  (!IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[31] ||
		   ~IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_ETC___d192[31:0])) ;
  assign x__h6509 =
	     x__h6573 +
	     ((!IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[47] &&
	       (IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[31] ||
		IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[47] &&
		  (!IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[31] ||
		   ~IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5__ETC___d151[31:0])) ;
  assign x__h6573 =
	     x__h6637 +
	     ((!IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[47] &&
	       (IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[31] ||
		IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[47] &&
		  (!IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[31] ||
		   ~IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_ETC___d111[31:0])) ;
  assign x__h6637 =
	     (!IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[47] &&
	      (IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[31] ||
	       IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[47:32] !=
	       16'd0)) ?
	       32'h7FFFFFFF :
	       ((IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[47] &&
		 (!IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[31] ||
		  ~IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[47:32] !=
		  16'd0)) ?
		  32'h80000000 :
		  IF_NOT_IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_ETC___d72[31:0]) ;
  assign y_f__h11263 =
	     (IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57[15] &&
	      (IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57[63] ||
	       IF_r_1_BIT_15_1_THEN_872_MUL_IF_r_1_BIT_15_1_T_ETC___d57[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h17311 =
	     (IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96[15] &&
	      (IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96[63] ||
	       IF_r_3_BIT_15_0_THEN_NEG_53615_MUL_IF_r_3_BIT__ETC___d96[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h23398 =
	     (IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136[15] &&
	      (IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136[63] ||
	       IF_r_5_0_BIT_15_30_THEN_872_MUL_IF_r_5_0_BIT_1_ETC___d136[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h29518 =
	     (IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177[15] &&
	      (IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177[63] ||
	       IF_r_7_70_BIT_15_71_THEN_813_MUL_IF_r_7_70_BIT_ETC___d177[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h4923 =
	     (IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[15] &&
	      (IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63] ||
	       IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        r_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r_7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (r_0$EN) r_0 <= `BSV_ASSIGNMENT_DELAY r_0$D_IN;
	if (r_1$EN) r_1 <= `BSV_ASSIGNMENT_DELAY r_1$D_IN;
	if (r_2$EN) r_2 <= `BSV_ASSIGNMENT_DELAY r_2$D_IN;
	if (r_3$EN) r_3 <= `BSV_ASSIGNMENT_DELAY r_3$D_IN;
	if (r_4$EN) r_4 <= `BSV_ASSIGNMENT_DELAY r_4$D_IN;
	if (r_5$EN) r_5 <= `BSV_ASSIGNMENT_DELAY r_5$D_IN;
	if (r_6$EN) r_6 <= `BSV_ASSIGNMENT_DELAY r_6$D_IN;
	if (r_7$EN) r_7 <= `BSV_ASSIGNMENT_DELAY r_7$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r_0 = 16'hAAAA;
    r_1 = 16'hAAAA;
    r_2 = 16'hAAAA;
    r_3 = 16'hAAAA;
    r_4 = 16'hAAAA;
    r_5 = 16'hAAAA;
    r_6 = 16'hAAAA;
    r_7 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFIRFilter

